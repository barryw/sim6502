//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from sim6502.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace sim6502.Grammar.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class sim6502Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, Boolean=2, ProcessorFlag=3, Register=4, Int=5, Hex=6, Binary=7, 
		CompareOperator=8, Assign=9, Equal=10, GT=11, LT=12, GTE=13, LTE=14, NotEqual=15, 
		Add=16, Sub=17, Mul=18, Div=19, BitAnd=20, BitOr=21, BitXor=22, Dollar=23, 
		Percent=24, Comma=25, LParen=26, RParen=27, LBrace=28, RBrace=29, LBracket=30, 
		RBracket=31, Quote=32, RegA=33, RegX=34, RegY=35, FlagC=36, FlagN=37, 
		FlagV=38, FlagD=39, FlagZ=40, BoolTrue=41, BoolFalse=42, Suites=43, Suite=44, 
		Test=45, Load=46, Symbols=47, Assert=48, JSR=49, PeekByte=50, PeekWord=51, 
		MemoryCmp=52, MemoryChk=53, Cycles=54, Address=55, StripHeader=56, StopOnAddress=57, 
		StopOnRTS=58, FailOnBRK=59, LoByte=60, HiByte=61, Byte=62, Word=63, Identifier=64, 
		StringLiteral=65, Comment=66, WS=67, NewLine=68;
	public const int
		RULE_suites = 0, RULE_suite = 1, RULE_suiteName = 2, RULE_assignment = 3, 
		RULE_address = 4, RULE_number = 5, RULE_boolean = 6, RULE_assertFunction = 7, 
		RULE_assertDescription = 8, RULE_comparison = 9, RULE_compareLHS = 10, 
		RULE_jsrFunction = 11, RULE_stopOn = 12, RULE_failOnBreak = 13, RULE_symbolsFunction = 14, 
		RULE_symbolsFilename = 15, RULE_loadFunction = 16, RULE_loadFilename = 17, 
		RULE_loadAddress = 18, RULE_stripHeader = 19, RULE_testFunction = 20, 
		RULE_testName = 21, RULE_testDescription = 22, RULE_testContents = 23, 
		RULE_peekByteFunction = 24, RULE_peekWordFunction = 25, RULE_memoryCmpFunction = 26, 
		RULE_memoryChkFunction = 27, RULE_sourceAddress = 28, RULE_targetAddress = 29, 
		RULE_memorySize = 30, RULE_memoryValue = 31, RULE_expression = 32, RULE_lbhb = 33, 
		RULE_byteWord = 34, RULE_intFunction = 35, RULE_boolFunction = 36, RULE_symbolRef = 37, 
		RULE_symbol = 38;
	public static readonly string[] ruleNames = {
		"suites", "suite", "suiteName", "assignment", "address", "number", "boolean", 
		"assertFunction", "assertDescription", "comparison", "compareLHS", "jsrFunction", 
		"stopOn", "failOnBreak", "symbolsFunction", "symbolsFilename", "loadFunction", 
		"loadFilename", "loadAddress", "stripHeader", "testFunction", "testName", 
		"testDescription", "testContents", "peekByteFunction", "peekWordFunction", 
		"memoryCmpFunction", "memoryChkFunction", "sourceAddress", "targetAddress", 
		"memorySize", "memoryValue", "expression", "lbhb", "byteWord", "intFunction", 
		"boolFunction", "symbolRef", "symbol"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", null, null, null, null, null, null, null, "'='", "'=='", 
		"'>'", "'<'", "'>='", "'<='", null, "'+'", "'-'", "'*'", "'/'", "'&'", 
		"'|'", "'^'", "'$'", "'%'", "','", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "'\"'", null, null, null, null, null, null, null, null, "'true'", 
		"'false'", "'suites'", "'suite'", "'test'", "'load'", "'symbols'", "'assert'", 
		"'jsr'", "'peekbyte'", "'peekword'", "'memcmp'", "'memchk'", "'cycles'", 
		"'address'", "'strip_header'", "'stop_on_address'", "'stop_on_rts'", "'fail_on_brk'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "Boolean", "ProcessorFlag", "Register", "Int", "Hex", "Binary", 
		"CompareOperator", "Assign", "Equal", "GT", "LT", "GTE", "LTE", "NotEqual", 
		"Add", "Sub", "Mul", "Div", "BitAnd", "BitOr", "BitXor", "Dollar", "Percent", 
		"Comma", "LParen", "RParen", "LBrace", "RBrace", "LBracket", "RBracket", 
		"Quote", "RegA", "RegX", "RegY", "FlagC", "FlagN", "FlagV", "FlagD", "FlagZ", 
		"BoolTrue", "BoolFalse", "Suites", "Suite", "Test", "Load", "Symbols", 
		"Assert", "JSR", "PeekByte", "PeekWord", "MemoryCmp", "MemoryChk", "Cycles", 
		"Address", "StripHeader", "StopOnAddress", "StopOnRTS", "FailOnBRK", "LoByte", 
		"HiByte", "Byte", "Word", "Identifier", "StringLiteral", "Comment", "WS", 
		"NewLine"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sim6502.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static sim6502Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sim6502Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sim6502Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SuitesContext : ParserRuleContext {
		public ITerminalNode Suites() { return GetToken(sim6502Parser.Suites, 0); }
		public ITerminalNode LBrace() { return GetToken(sim6502Parser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(sim6502Parser.RBrace, 0); }
		public SuiteContext[] suite() {
			return GetRuleContexts<SuiteContext>();
		}
		public SuiteContext suite(int i) {
			return GetRuleContext<SuiteContext>(i);
		}
		public SuitesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suites; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSuites(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSuites(this);
		}
	}

	[RuleVersion(0)]
	public SuitesContext suites() {
		SuitesContext _localctx = new SuitesContext(Context, State);
		EnterRule(_localctx, 0, RULE_suites);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(Suites);
			State = 79; Match(LBrace);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Suite) {
				{
				{
				State = 80; suite();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuiteContext : ParserRuleContext {
		public ITerminalNode Suite() { return GetToken(sim6502Parser.Suite, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public SuiteNameContext suiteName() {
			return GetRuleContext<SuiteNameContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public ITerminalNode LBrace() { return GetToken(sim6502Parser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(sim6502Parser.RBrace, 0); }
		public TestFunctionContext[] testFunction() {
			return GetRuleContexts<TestFunctionContext>();
		}
		public TestFunctionContext testFunction(int i) {
			return GetRuleContext<TestFunctionContext>(i);
		}
		public SymbolsFunctionContext[] symbolsFunction() {
			return GetRuleContexts<SymbolsFunctionContext>();
		}
		public SymbolsFunctionContext symbolsFunction(int i) {
			return GetRuleContext<SymbolsFunctionContext>(i);
		}
		public LoadFunctionContext[] loadFunction() {
			return GetRuleContexts<LoadFunctionContext>();
		}
		public LoadFunctionContext loadFunction(int i) {
			return GetRuleContext<LoadFunctionContext>(i);
		}
		public SuiteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suite; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSuite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSuite(this);
		}
	}

	[RuleVersion(0)]
	public SuiteContext suite() {
		SuiteContext _localctx = new SuiteContext(Context, State);
		EnterRule(_localctx, 2, RULE_suite);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(Suite);
			State = 89; Match(LParen);
			State = 90; suiteName();
			State = 91; Match(RParen);
			State = 92; Match(LBrace);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 96;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Test:
					{
					State = 93; testFunction();
					}
					break;
				case Symbols:
					{
					State = 94; symbolsFunction();
					}
					break;
				case Load:
					{
					State = 95; loadFunction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Test) | (1L << Load) | (1L << Symbols))) != 0) );
			State = 100; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuiteNameContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(sim6502Parser.StringLiteral, 0); }
		public SuiteNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suiteName; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSuiteName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSuiteName(this);
		}
	}

	[RuleVersion(0)]
	public SuiteNameContext suiteName() {
		SuiteNameContext _localctx = new SuiteNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_suiteName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAssignmentContext : AssignmentContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Assign() { return GetToken(sim6502Parser.Assign, 0); }
		public ExpressionAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterExpressionAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitExpressionAssignment(this);
		}
	}
	public partial class RegisterAssignmentContext : AssignmentContext {
		public ITerminalNode Register() { return GetToken(sim6502Parser.Register, 0); }
		public ITerminalNode Assign() { return GetToken(sim6502Parser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RegisterAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterRegisterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitRegisterAssignment(this);
		}
	}
	public partial class SymbolAssignmentContext : AssignmentContext {
		public SymbolRefContext symbolRef() {
			return GetRuleContext<SymbolRefContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(sim6502Parser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SymbolAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSymbolAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSymbolAssignment(this);
		}
	}
	public partial class AddressAssignmentContext : AssignmentContext {
		public AddressContext address() {
			return GetRuleContext<AddressContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(sim6502Parser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddressAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterAddressAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitAddressAssignment(this);
		}
	}
	public partial class FlagAssignmentContext : AssignmentContext {
		public ITerminalNode ProcessorFlag() { return GetToken(sim6502Parser.ProcessorFlag, 0); }
		public ITerminalNode Assign() { return GetToken(sim6502Parser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FlagAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterFlagAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitFlagAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; expression(0);
				State = 105; Match(Assign);
				State = 106; expression(0);
				}
				break;
			case 2:
				_localctx = new SymbolAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; symbolRef();
				State = 109; Match(Assign);
				State = 110; expression(0);
				}
				break;
			case 3:
				_localctx = new AddressAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; address();
				State = 113; Match(Assign);
				State = 114; expression(0);
				}
				break;
			case 4:
				_localctx = new RegisterAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 116; Match(Register);
				State = 117; Match(Assign);
				State = 118; expression(0);
				}
				break;
			case 5:
				_localctx = new FlagAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 119; Match(ProcessorFlag);
				State = 120; Match(Assign);
				State = 121; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddressContext : ParserRuleContext {
		public AddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_address; } }
	 
		public AddressContext() { }
		public virtual void CopyFrom(AddressContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbolAddressContext : AddressContext {
		public SymbolRefContext symbolRef() {
			return GetRuleContext<SymbolRefContext>(0);
		}
		public SymbolAddressContext(AddressContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSymbolAddress(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSymbolAddress(this);
		}
	}
	public partial class NumberAddressContext : AddressContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberAddressContext(AddressContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterNumberAddress(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitNumberAddress(this);
		}
	}

	[RuleVersion(0)]
	public AddressContext address() {
		AddressContext _localctx = new AddressContext(Context, State);
		EnterRule(_localctx, 8, RULE_address);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Int:
			case Hex:
			case Binary:
				_localctx = new NumberAddressContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; number();
				}
				break;
			case LBracket:
				_localctx = new SymbolAddressContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; symbolRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HexNumberContext : NumberContext {
		public ITerminalNode Hex() { return GetToken(sim6502Parser.Hex, 0); }
		public HexNumberContext(NumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterHexNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitHexNumber(this);
		}
	}
	public partial class IntNumberContext : NumberContext {
		public ITerminalNode Int() { return GetToken(sim6502Parser.Int, 0); }
		public IntNumberContext(NumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterIntNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitIntNumber(this);
		}
	}
	public partial class BinaryNumberContext : NumberContext {
		public ITerminalNode Binary() { return GetToken(sim6502Parser.Binary, 0); }
		public BinaryNumberContext(NumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterBinaryNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitBinaryNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 10, RULE_number);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Hex:
				_localctx = new HexNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; Match(Hex);
				}
				break;
			case Int:
				_localctx = new IntNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; Match(Int);
				}
				break;
			case Binary:
				_localctx = new BinaryNumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 130; Match(Binary);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode Boolean() { return GetToken(sim6502Parser.Boolean, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 12, RULE_boolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(Boolean);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertFunctionContext : ParserRuleContext {
		public ITerminalNode Assert() { return GetToken(sim6502Parser.Assert, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(sim6502Parser.Comma, 0); }
		public AssertDescriptionContext assertDescription() {
			return GetRuleContext<AssertDescriptionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public AssertFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterAssertFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitAssertFunction(this);
		}
	}

	[RuleVersion(0)]
	public AssertFunctionContext assertFunction() {
		AssertFunctionContext _localctx = new AssertFunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_assertFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(Assert);
			State = 136; Match(LParen);
			State = 137; comparison();
			State = 138; Match(Comma);
			State = 139; assertDescription();
			State = 140; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertDescriptionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(sim6502Parser.StringLiteral, 0); }
		public AssertDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertDescription; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterAssertDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitAssertDescription(this);
		}
	}

	[RuleVersion(0)]
	public AssertDescriptionContext assertDescription() {
		AssertDescriptionContext _localctx = new AssertDescriptionContext(Context, State);
		EnterRule(_localctx, 16, RULE_assertDescription);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	 
		public ComparisonContext() { }
		public virtual void CopyFrom(ComparisonContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompareExpressionContext : ComparisonContext {
		public CompareLHSContext compareLHS() {
			return GetRuleContext<CompareLHSContext>(0);
		}
		public ITerminalNode CompareOperator() { return GetToken(sim6502Parser.CompareOperator, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompareExpressionContext(ComparisonContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
	}
	public partial class MemoryChkContext : ComparisonContext {
		public MemoryChkFunctionContext memoryChkFunction() {
			return GetRuleContext<MemoryChkFunctionContext>(0);
		}
		public MemoryChkContext(ComparisonContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterMemoryChk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitMemoryChk(this);
		}
	}
	public partial class MemoryCmpContext : ComparisonContext {
		public MemoryCmpFunctionContext memoryCmpFunction() {
			return GetRuleContext<MemoryCmpFunctionContext>(0);
		}
		public MemoryCmpContext(ComparisonContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterMemoryCmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitMemoryCmp(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 18, RULE_comparison);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new CompareExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; compareLHS();
				State = 145; Match(CompareOperator);
				State = 146; expression(0);
				}
				break;
			case 2:
				_localctx = new MemoryChkContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; memoryChkFunction();
				}
				break;
			case 3:
				_localctx = new MemoryCmpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 149; memoryCmpFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareLHSContext : ParserRuleContext {
		public CompareLHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareLHS; } }
	 
		public CompareLHSContext() { }
		public virtual void CopyFrom(CompareLHSContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RegisterCompareContext : CompareLHSContext {
		public ITerminalNode Register() { return GetToken(sim6502Parser.Register, 0); }
		public RegisterCompareContext(CompareLHSContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterRegisterCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitRegisterCompare(this);
		}
	}
	public partial class AddressCompareContext : CompareLHSContext {
		public AddressContext address() {
			return GetRuleContext<AddressContext>(0);
		}
		public AddressCompareContext(CompareLHSContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterAddressCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitAddressCompare(this);
		}
	}
	public partial class ExpressionCompareContext : CompareLHSContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ByteWordContext byteWord() {
			return GetRuleContext<ByteWordContext>(0);
		}
		public ExpressionCompareContext(CompareLHSContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterExpressionCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitExpressionCompare(this);
		}
	}
	public partial class FlagCompareContext : CompareLHSContext {
		public ITerminalNode ProcessorFlag() { return GetToken(sim6502Parser.ProcessorFlag, 0); }
		public FlagCompareContext(CompareLHSContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterFlagCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitFlagCompare(this);
		}
	}
	public partial class CyclesCompareContext : CompareLHSContext {
		public ITerminalNode Cycles() { return GetToken(sim6502Parser.Cycles, 0); }
		public CyclesCompareContext(CompareLHSContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterCyclesCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitCyclesCompare(this);
		}
	}

	[RuleVersion(0)]
	public CompareLHSContext compareLHS() {
		CompareLHSContext _localctx = new CompareLHSContext(Context, State);
		EnterRule(_localctx, 20, RULE_compareLHS);
		int _la;
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new RegisterCompareContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; Match(Register);
				}
				break;
			case 2:
				_localctx = new FlagCompareContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; Match(ProcessorFlag);
				}
				break;
			case 3:
				_localctx = new AddressCompareContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 154; address();
				}
				break;
			case 4:
				_localctx = new CyclesCompareContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 155; Match(Cycles);
				}
				break;
			case 5:
				_localctx = new ExpressionCompareContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 156; expression(0);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Byte || _la==Word) {
					{
					State = 157; byteWord();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsrFunctionContext : ParserRuleContext {
		public ITerminalNode JSR() { return GetToken(sim6502Parser.JSR, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public AddressContext address() {
			return GetRuleContext<AddressContext>(0);
		}
		public StopOnContext stopOn() {
			return GetRuleContext<StopOnContext>(0);
		}
		public FailOnBreakContext failOnBreak() {
			return GetRuleContext<FailOnBreakContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public JsrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsrFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterJsrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitJsrFunction(this);
		}
	}

	[RuleVersion(0)]
	public JsrFunctionContext jsrFunction() {
		JsrFunctionContext _localctx = new JsrFunctionContext(Context, State);
		EnterRule(_localctx, 22, RULE_jsrFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(JSR);
			State = 163; Match(LParen);
			State = 164; address();
			State = 165; stopOn();
			State = 166; failOnBreak();
			State = 167; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopOnContext : ParserRuleContext {
		public ITerminalNode Comma() { return GetToken(sim6502Parser.Comma, 0); }
		public ITerminalNode StopOnAddress() { return GetToken(sim6502Parser.StopOnAddress, 0); }
		public ITerminalNode Assign() { return GetToken(sim6502Parser.Assign, 0); }
		public AddressContext address() {
			return GetRuleContext<AddressContext>(0);
		}
		public ITerminalNode StopOnRTS() { return GetToken(sim6502Parser.StopOnRTS, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public StopOnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopOn; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterStopOn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitStopOn(this);
		}
	}

	[RuleVersion(0)]
	public StopOnContext stopOn() {
		StopOnContext _localctx = new StopOnContext(Context, State);
		EnterRule(_localctx, 24, RULE_stopOn);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; Match(Comma);
				State = 170; Match(StopOnAddress);
				State = 171; Match(Assign);
				State = 172; address();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; Match(Comma);
				State = 174; Match(StopOnRTS);
				State = 175; Match(Assign);
				State = 176; boolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FailOnBreakContext : ParserRuleContext {
		public ITerminalNode Comma() { return GetToken(sim6502Parser.Comma, 0); }
		public ITerminalNode FailOnBRK() { return GetToken(sim6502Parser.FailOnBRK, 0); }
		public ITerminalNode Assign() { return GetToken(sim6502Parser.Assign, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public FailOnBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_failOnBreak; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterFailOnBreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitFailOnBreak(this);
		}
	}

	[RuleVersion(0)]
	public FailOnBreakContext failOnBreak() {
		FailOnBreakContext _localctx = new FailOnBreakContext(Context, State);
		EnterRule(_localctx, 26, RULE_failOnBreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(Comma);
			State = 180; Match(FailOnBRK);
			State = 181; Match(Assign);
			State = 182; boolean();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolsFunctionContext : ParserRuleContext {
		public ITerminalNode Symbols() { return GetToken(sim6502Parser.Symbols, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public SymbolsFilenameContext symbolsFilename() {
			return GetRuleContext<SymbolsFilenameContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public SymbolsFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolsFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSymbolsFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSymbolsFunction(this);
		}
	}

	[RuleVersion(0)]
	public SymbolsFunctionContext symbolsFunction() {
		SymbolsFunctionContext _localctx = new SymbolsFunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_symbolsFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(Symbols);
			State = 185; Match(LParen);
			State = 186; symbolsFilename();
			State = 187; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolsFilenameContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(sim6502Parser.StringLiteral, 0); }
		public SymbolsFilenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolsFilename; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSymbolsFilename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSymbolsFilename(this);
		}
	}

	[RuleVersion(0)]
	public SymbolsFilenameContext symbolsFilename() {
		SymbolsFilenameContext _localctx = new SymbolsFilenameContext(Context, State);
		EnterRule(_localctx, 30, RULE_symbolsFilename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadFunctionContext : ParserRuleContext {
		public ITerminalNode Load() { return GetToken(sim6502Parser.Load, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public LoadFilenameContext loadFilename() {
			return GetRuleContext<LoadFilenameContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public LoadAddressContext loadAddress() {
			return GetRuleContext<LoadAddressContext>(0);
		}
		public StripHeaderContext stripHeader() {
			return GetRuleContext<StripHeaderContext>(0);
		}
		public LoadFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterLoadFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitLoadFunction(this);
		}
	}

	[RuleVersion(0)]
	public LoadFunctionContext loadFunction() {
		LoadFunctionContext _localctx = new LoadFunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_loadFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(Load);
			State = 192; Match(LParen);
			State = 193; loadFilename();
			State = 195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 194; loadAddress();
				}
				break;
			}
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 197; stripHeader();
				}
			}

			State = 200; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadFilenameContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(sim6502Parser.StringLiteral, 0); }
		public LoadFilenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadFilename; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterLoadFilename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitLoadFilename(this);
		}
	}

	[RuleVersion(0)]
	public LoadFilenameContext loadFilename() {
		LoadFilenameContext _localctx = new LoadFilenameContext(Context, State);
		EnterRule(_localctx, 34, RULE_loadFilename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadAddressContext : ParserRuleContext {
		public ITerminalNode Comma() { return GetToken(sim6502Parser.Comma, 0); }
		public ITerminalNode Address() { return GetToken(sim6502Parser.Address, 0); }
		public ITerminalNode Assign() { return GetToken(sim6502Parser.Assign, 0); }
		public AddressContext address() {
			return GetRuleContext<AddressContext>(0);
		}
		public LoadAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadAddress; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterLoadAddress(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitLoadAddress(this);
		}
	}

	[RuleVersion(0)]
	public LoadAddressContext loadAddress() {
		LoadAddressContext _localctx = new LoadAddressContext(Context, State);
		EnterRule(_localctx, 36, RULE_loadAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(Comma);
			State = 205; Match(Address);
			State = 206; Match(Assign);
			State = 207; address();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StripHeaderContext : ParserRuleContext {
		public ITerminalNode Comma() { return GetToken(sim6502Parser.Comma, 0); }
		public ITerminalNode StripHeader() { return GetToken(sim6502Parser.StripHeader, 0); }
		public ITerminalNode Assign() { return GetToken(sim6502Parser.Assign, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public StripHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stripHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterStripHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitStripHeader(this);
		}
	}

	[RuleVersion(0)]
	public StripHeaderContext stripHeader() {
		StripHeaderContext _localctx = new StripHeaderContext(Context, State);
		EnterRule(_localctx, 38, RULE_stripHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(Comma);
			State = 210; Match(StripHeader);
			State = 211; Match(Assign);
			State = 212; boolean();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestFunctionContext : ParserRuleContext {
		public ITerminalNode Test() { return GetToken(sim6502Parser.Test, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public TestNameContext testName() {
			return GetRuleContext<TestNameContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(sim6502Parser.Comma, 0); }
		public TestDescriptionContext testDescription() {
			return GetRuleContext<TestDescriptionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public ITerminalNode LBrace() { return GetToken(sim6502Parser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(sim6502Parser.RBrace, 0); }
		public TestContentsContext[] testContents() {
			return GetRuleContexts<TestContentsContext>();
		}
		public TestContentsContext testContents(int i) {
			return GetRuleContext<TestContentsContext>(i);
		}
		public TestFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterTestFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitTestFunction(this);
		}
	}

	[RuleVersion(0)]
	public TestFunctionContext testFunction() {
		TestFunctionContext _localctx = new TestFunctionContext(Context, State);
		EnterRule(_localctx, 40, RULE_testFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(Test);
			State = 215; Match(LParen);
			State = 216; testName();
			State = 217; Match(Comma);
			State = 218; testDescription();
			State = 219; Match(RParen);
			State = 220; Match(LBrace);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 221; testContents();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Boolean) | (1L << ProcessorFlag) | (1L << Register) | (1L << Int) | (1L << Hex) | (1L << Binary) | (1L << LParen) | (1L << LBracket) | (1L << Assert) | (1L << JSR) | (1L << PeekByte) | (1L << PeekWord) | (1L << MemoryCmp) | (1L << MemoryChk))) != 0) );
			State = 226; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestNameContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(sim6502Parser.StringLiteral, 0); }
		public TestNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testName; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterTestName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitTestName(this);
		}
	}

	[RuleVersion(0)]
	public TestNameContext testName() {
		TestNameContext _localctx = new TestNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_testName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestDescriptionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(sim6502Parser.StringLiteral, 0); }
		public TestDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testDescription; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterTestDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitTestDescription(this);
		}
	}

	[RuleVersion(0)]
	public TestDescriptionContext testDescription() {
		TestDescriptionContext _localctx = new TestDescriptionContext(Context, State);
		EnterRule(_localctx, 44, RULE_testDescription);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContentsContext : ParserRuleContext {
		public AssertFunctionContext[] assertFunction() {
			return GetRuleContexts<AssertFunctionContext>();
		}
		public AssertFunctionContext assertFunction(int i) {
			return GetRuleContext<AssertFunctionContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public JsrFunctionContext[] jsrFunction() {
			return GetRuleContexts<JsrFunctionContext>();
		}
		public JsrFunctionContext jsrFunction(int i) {
			return GetRuleContext<JsrFunctionContext>(i);
		}
		public TestContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testContents; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterTestContents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitTestContents(this);
		}
	}

	[RuleVersion(0)]
	public TestContentsContext testContents() {
		TestContentsContext _localctx = new TestContentsContext(Context, State);
		EnterRule(_localctx, 46, RULE_testContents);
		try {
			int _alt;
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assert:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 232; assertFunction();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 235;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case Boolean:
			case ProcessorFlag:
			case Register:
			case Int:
			case Hex:
			case Binary:
			case LParen:
			case LBracket:
			case PeekByte:
			case PeekWord:
			case MemoryCmp:
			case MemoryChk:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 237; assignment();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 240;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case JSR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 243;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 242; jsrFunction();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 245;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeekByteFunctionContext : ParserRuleContext {
		public ITerminalNode PeekByte() { return GetToken(sim6502Parser.PeekByte, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public PeekByteFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peekByteFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterPeekByteFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitPeekByteFunction(this);
		}
	}

	[RuleVersion(0)]
	public PeekByteFunctionContext peekByteFunction() {
		PeekByteFunctionContext _localctx = new PeekByteFunctionContext(Context, State);
		EnterRule(_localctx, 48, RULE_peekByteFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(PeekByte);
			State = 250; Match(LParen);
			State = 251; expression(0);
			State = 252; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeekWordFunctionContext : ParserRuleContext {
		public ITerminalNode PeekWord() { return GetToken(sim6502Parser.PeekWord, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public PeekWordFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peekWordFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterPeekWordFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitPeekWordFunction(this);
		}
	}

	[RuleVersion(0)]
	public PeekWordFunctionContext peekWordFunction() {
		PeekWordFunctionContext _localctx = new PeekWordFunctionContext(Context, State);
		EnterRule(_localctx, 50, RULE_peekWordFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(PeekWord);
			State = 255; Match(LParen);
			State = 256; expression(0);
			State = 257; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryCmpFunctionContext : ParserRuleContext {
		public ITerminalNode MemoryCmp() { return GetToken(sim6502Parser.MemoryCmp, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public SourceAddressContext sourceAddress() {
			return GetRuleContext<SourceAddressContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(sim6502Parser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(sim6502Parser.Comma, i);
		}
		public TargetAddressContext targetAddress() {
			return GetRuleContext<TargetAddressContext>(0);
		}
		public MemorySizeContext memorySize() {
			return GetRuleContext<MemorySizeContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public MemoryCmpFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryCmpFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterMemoryCmpFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitMemoryCmpFunction(this);
		}
	}

	[RuleVersion(0)]
	public MemoryCmpFunctionContext memoryCmpFunction() {
		MemoryCmpFunctionContext _localctx = new MemoryCmpFunctionContext(Context, State);
		EnterRule(_localctx, 52, RULE_memoryCmpFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(MemoryCmp);
			State = 260; Match(LParen);
			State = 261; sourceAddress();
			State = 262; Match(Comma);
			State = 263; targetAddress();
			State = 264; Match(Comma);
			State = 265; memorySize();
			State = 266; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryChkFunctionContext : ParserRuleContext {
		public ITerminalNode MemoryChk() { return GetToken(sim6502Parser.MemoryChk, 0); }
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public SourceAddressContext sourceAddress() {
			return GetRuleContext<SourceAddressContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(sim6502Parser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(sim6502Parser.Comma, i);
		}
		public MemorySizeContext memorySize() {
			return GetRuleContext<MemorySizeContext>(0);
		}
		public MemoryValueContext memoryValue() {
			return GetRuleContext<MemoryValueContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public MemoryChkFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryChkFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterMemoryChkFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitMemoryChkFunction(this);
		}
	}

	[RuleVersion(0)]
	public MemoryChkFunctionContext memoryChkFunction() {
		MemoryChkFunctionContext _localctx = new MemoryChkFunctionContext(Context, State);
		EnterRule(_localctx, 54, RULE_memoryChkFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(MemoryChk);
			State = 269; Match(LParen);
			State = 270; sourceAddress();
			State = 271; Match(Comma);
			State = 272; memorySize();
			State = 273; Match(Comma);
			State = 274; memoryValue();
			State = 275; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceAddressContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SourceAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceAddress; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSourceAddress(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSourceAddress(this);
		}
	}

	[RuleVersion(0)]
	public SourceAddressContext sourceAddress() {
		SourceAddressContext _localctx = new SourceAddressContext(Context, State);
		EnterRule(_localctx, 56, RULE_sourceAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetAddressContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TargetAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetAddress; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterTargetAddress(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitTargetAddress(this);
		}
	}

	[RuleVersion(0)]
	public TargetAddressContext targetAddress() {
		TargetAddressContext _localctx = new TargetAddressContext(Context, State);
		EnterRule(_localctx, 58, RULE_targetAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemorySizeContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemorySizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memorySize; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterMemorySize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitMemorySize(this);
		}
	}

	[RuleVersion(0)]
	public MemorySizeContext memorySize() {
		MemorySizeContext _localctx = new MemorySizeContext(Context, State);
		EnterRule(_localctx, 60, RULE_memorySize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemoryValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterMemoryValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitMemoryValue(this);
		}
	}

	[RuleVersion(0)]
	public MemoryValueContext memoryValue() {
		MemoryValueContext _localctx = new MemoryValueContext(Context, State);
		EnterRule(_localctx, 62, RULE_memoryValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddressValueContext : ExpressionContext {
		public AddressContext address() {
			return GetRuleContext<AddressContext>(0);
		}
		public LbhbContext lbhb() {
			return GetRuleContext<LbhbContext>(0);
		}
		public AddressValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterAddressValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitAddressValue(this);
		}
	}
	public partial class DivisionValueContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Div() { return GetToken(sim6502Parser.Div, 0); }
		public DivisionValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterDivisionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitDivisionValue(this);
		}
	}
	public partial class IntValueContext : ExpressionContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public LbhbContext lbhb() {
			return GetRuleContext<LbhbContext>(0);
		}
		public IntValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterIntValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitIntValue(this);
		}
	}
	public partial class IntFunctionValueContext : ExpressionContext {
		public IntFunctionContext intFunction() {
			return GetRuleContext<IntFunctionContext>(0);
		}
		public IntFunctionValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterIntFunctionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitIntFunctionValue(this);
		}
	}
	public partial class BitOrExpressionValueContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BitOr() { return GetToken(sim6502Parser.BitOr, 0); }
		public BitOrExpressionValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterBitOrExpressionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitBitOrExpressionValue(this);
		}
	}
	public partial class BoolFunctionValueContext : ExpressionContext {
		public BoolFunctionContext boolFunction() {
			return GetRuleContext<BoolFunctionContext>(0);
		}
		public BoolFunctionValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterBoolFunctionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitBoolFunctionValue(this);
		}
	}
	public partial class SubValueContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Sub() { return GetToken(sim6502Parser.Sub, 0); }
		public SubValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSubValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSubValue(this);
		}
	}
	public partial class SubExpressionValueContext : ExpressionContext {
		public ITerminalNode LParen() { return GetToken(sim6502Parser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(sim6502Parser.RParen, 0); }
		public SubExpressionValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSubExpressionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSubExpressionValue(this);
		}
	}
	public partial class BoolValueContext : ExpressionContext {
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public BoolValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterBoolValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitBoolValue(this);
		}
	}
	public partial class BitXorExpressionValueContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BitXor() { return GetToken(sim6502Parser.BitXor, 0); }
		public BitXorExpressionValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterBitXorExpressionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitBitXorExpressionValue(this);
		}
	}
	public partial class MultiplyValueContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Mul() { return GetToken(sim6502Parser.Mul, 0); }
		public MultiplyValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterMultiplyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitMultiplyValue(this);
		}
	}
	public partial class BitAndExpressionValueContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BitAnd() { return GetToken(sim6502Parser.BitAnd, 0); }
		public BitAndExpressionValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterBitAndExpressionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitBitAndExpressionValue(this);
		}
	}
	public partial class AddValueContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Add() { return GetToken(sim6502Parser.Add, 0); }
		public AddValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterAddValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitAddValue(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				_localctx = new AddressValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 286; address();
				State = 288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 287; lbhb();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new IntValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 290; number();
				State = 292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 291; lbhb();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new BoolValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 294; boolean();
				}
				break;
			case 4:
				{
				_localctx = new IntFunctionValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 295; intFunction();
				}
				break;
			case 5:
				{
				_localctx = new BoolFunctionValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 296; boolFunction();
				}
				break;
			case 6:
				{
				_localctx = new SubExpressionValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 297; Match(LParen);
				State = 298; expression(0);
				State = 299; Match(RParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 324;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new BitAndExpressionValueContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 303;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 304; Match(BitAnd);
						State = 305; expression(8);
						}
						break;
					case 2:
						{
						_localctx = new BitOrExpressionValueContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 306;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 307; Match(BitOr);
						State = 308; expression(7);
						}
						break;
					case 3:
						{
						_localctx = new BitXorExpressionValueContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 309;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 310; Match(BitXor);
						State = 311; expression(6);
						}
						break;
					case 4:
						{
						_localctx = new MultiplyValueContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 312;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 313; Match(Mul);
						State = 314; expression(5);
						}
						break;
					case 5:
						{
						_localctx = new DivisionValueContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 315;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 316; Match(Div);
						State = 317; expression(4);
						}
						break;
					case 6:
						{
						_localctx = new AddValueContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 318;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 319; Match(Add);
						State = 320; expression(3);
						}
						break;
					case 7:
						{
						_localctx = new SubValueContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 321;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 322; Match(Sub);
						State = 323; expression(2);
						}
						break;
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LbhbContext : ParserRuleContext {
		public LbhbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lbhb; } }
	 
		public LbhbContext() { }
		public virtual void CopyFrom(LbhbContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HiByteContext : LbhbContext {
		public ITerminalNode HiByte() { return GetToken(sim6502Parser.HiByte, 0); }
		public HiByteContext(LbhbContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterHiByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitHiByte(this);
		}
	}
	public partial class LoByteContext : LbhbContext {
		public ITerminalNode LoByte() { return GetToken(sim6502Parser.LoByte, 0); }
		public LoByteContext(LbhbContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterLoByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitLoByte(this);
		}
	}

	[RuleVersion(0)]
	public LbhbContext lbhb() {
		LbhbContext _localctx = new LbhbContext(Context, State);
		EnterRule(_localctx, 66, RULE_lbhb);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LoByte:
				_localctx = new LoByteContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; Match(LoByte);
				}
				break;
			case HiByte:
				_localctx = new HiByteContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 330; Match(HiByte);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteWordContext : ParserRuleContext {
		public ByteWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byteWord; } }
	 
		public ByteWordContext() { }
		public virtual void CopyFrom(ByteWordContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WordValueContext : ByteWordContext {
		public ITerminalNode Word() { return GetToken(sim6502Parser.Word, 0); }
		public WordValueContext(ByteWordContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterWordValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitWordValue(this);
		}
	}
	public partial class ByteValueContext : ByteWordContext {
		public ITerminalNode Byte() { return GetToken(sim6502Parser.Byte, 0); }
		public ByteValueContext(ByteWordContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterByteValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitByteValue(this);
		}
	}

	[RuleVersion(0)]
	public ByteWordContext byteWord() {
		ByteWordContext _localctx = new ByteWordContext(Context, State);
		EnterRule(_localctx, 68, RULE_byteWord);
		try {
			State = 335;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Byte:
				_localctx = new ByteValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 333; Match(Byte);
				}
				break;
			case Word:
				_localctx = new WordValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; Match(Word);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntFunctionContext : ParserRuleContext {
		public IntFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intFunction; } }
	 
		public IntFunctionContext() { }
		public virtual void CopyFrom(IntFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PeekByteFunctionValueContext : IntFunctionContext {
		public PeekByteFunctionContext peekByteFunction() {
			return GetRuleContext<PeekByteFunctionContext>(0);
		}
		public PeekByteFunctionValueContext(IntFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterPeekByteFunctionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitPeekByteFunctionValue(this);
		}
	}
	public partial class PeekWordFunctionValueContext : IntFunctionContext {
		public PeekWordFunctionContext peekWordFunction() {
			return GetRuleContext<PeekWordFunctionContext>(0);
		}
		public PeekWordFunctionValueContext(IntFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterPeekWordFunctionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitPeekWordFunctionValue(this);
		}
	}

	[RuleVersion(0)]
	public IntFunctionContext intFunction() {
		IntFunctionContext _localctx = new IntFunctionContext(Context, State);
		EnterRule(_localctx, 70, RULE_intFunction);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PeekByte:
				_localctx = new PeekByteFunctionValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 337; peekByteFunction();
				}
				break;
			case PeekWord:
				_localctx = new PeekWordFunctionValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 338; peekWordFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolFunctionContext : ParserRuleContext {
		public BoolFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolFunction; } }
	 
		public BoolFunctionContext() { }
		public virtual void CopyFrom(BoolFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemoryCmpFunctionValueContext : BoolFunctionContext {
		public MemoryCmpFunctionContext memoryCmpFunction() {
			return GetRuleContext<MemoryCmpFunctionContext>(0);
		}
		public MemoryCmpFunctionValueContext(BoolFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterMemoryCmpFunctionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitMemoryCmpFunctionValue(this);
		}
	}
	public partial class MemoryChkFunctionValueContext : BoolFunctionContext {
		public MemoryChkFunctionContext memoryChkFunction() {
			return GetRuleContext<MemoryChkFunctionContext>(0);
		}
		public MemoryChkFunctionValueContext(BoolFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterMemoryChkFunctionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitMemoryChkFunctionValue(this);
		}
	}

	[RuleVersion(0)]
	public BoolFunctionContext boolFunction() {
		BoolFunctionContext _localctx = new BoolFunctionContext(Context, State);
		EnterRule(_localctx, 72, RULE_boolFunction);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MemoryChk:
				_localctx = new MemoryChkFunctionValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 341; memoryChkFunction();
				}
				break;
			case MemoryCmp:
				_localctx = new MemoryCmpFunctionValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 342; memoryCmpFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolRefContext : ParserRuleContext {
		public ITerminalNode LBracket() { return GetToken(sim6502Parser.LBracket, 0); }
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public ITerminalNode RBracket() { return GetToken(sim6502Parser.RBracket, 0); }
		public SymbolRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSymbolRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSymbolRef(this);
		}
	}

	[RuleVersion(0)]
	public SymbolRefContext symbolRef() {
		SymbolRefContext _localctx = new SymbolRefContext(Context, State);
		EnterRule(_localctx, 74, RULE_symbolRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(LBracket);
			State = 346; symbol();
			State = 347; Match(RBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(sim6502Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(sim6502Parser.Identifier, i);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Isim6502Listener typedListener = listener as Isim6502Listener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 76, RULE_symbol);
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350; Match(Identifier);
				State = 351; Match(T__0);
				State = 352; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x46', '\x166', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'T', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', 'W', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\x63', '\n', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\x64', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '}', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x81', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x86', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x99', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA1', '\n', 
		'\f', '\x5', '\f', '\xA3', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB4', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\xC6', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\xC9', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x6', '\x16', '\xE1', 
		'\n', '\x16', '\r', '\x16', '\xE', '\x16', '\xE2', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x6', '\x19', '\xEC', '\n', '\x19', '\r', '\x19', '\xE', '\x19', 
		'\xED', '\x3', '\x19', '\x6', '\x19', '\xF1', '\n', '\x19', '\r', '\x19', 
		'\xE', '\x19', '\xF2', '\x3', '\x19', '\x6', '\x19', '\xF6', '\n', '\x19', 
		'\r', '\x19', '\xE', '\x19', '\xF7', '\x5', '\x19', '\xFA', '\n', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x123', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x127', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x130', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x147', '\n', '\"', '\f', 
		'\"', '\xE', '\"', '\x14A', '\v', '\"', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x14E', '\n', '#', '\x3', '$', '\x3', '$', '\x5', '$', '\x152', 
		'\n', '$', '\x3', '%', '\x3', '%', '\x5', '%', '\x156', '\n', '%', '\x3', 
		'&', '\x3', '&', '\x5', '&', '\x15A', '\n', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x164', '\n', '(', '\x3', '(', '\x2', '\x3', '\x42', ')', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', '\x2', '\x2', '\x2', '\x16C', 
		'\x2', 'P', '\x3', '\x2', '\x2', '\x2', '\x4', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'h', '\x3', '\x2', '\x2', '\x2', '\b', '|', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x80', '\x3', '\x2', '\x2', '\x2', '\f', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x89', '\x3', '\x2', '\x2', '\x2', '\x12', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x98', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xBA', '\x3', '\x2', '\x2', '\x2', ' ', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xCC', '\x3', '\x2', '\x2', '\x2', '&', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xD3', '\x3', '\x2', '\x2', '\x2', '*', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xE6', '\x3', '\x2', '\x2', '\x2', '.', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\x34', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x105', '\x3', '\x2', '\x2', '\x2', '\x38', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x117', '\x3', '\x2', '\x2', '\x2', '<', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x42', '\x12F', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x46', '\x151', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x159', '\x3', '\x2', '\x2', '\x2', 'L', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x163', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', 
		'-', '\x2', '\x2', 'Q', 'U', '\a', '\x1E', '\x2', '\x2', 'R', 'T', '\x5', 
		'\x4', '\x3', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x1F', '\x2', '\x2', 'Y', '\x3', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '.', '\x2', '\x2', '[', '\\', 
		'\a', '\x1C', '\x2', '\x2', '\\', ']', '\x5', '\x6', '\x4', '\x2', ']', 
		'^', '\a', '\x1D', '\x2', '\x2', '^', '\x62', '\a', '\x1E', '\x2', '\x2', 
		'_', '\x63', '\x5', '*', '\x16', '\x2', '`', '\x63', '\x5', '\x1E', '\x10', 
		'\x2', '\x61', '\x63', '\x5', '\"', '\x12', '\x2', '\x62', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\a', '\x1F', '\x2', '\x2', 'g', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'h', 'i', '\a', '\x43', '\x2', '\x2', 'i', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'k', '\x5', '\x42', '\"', '\x2', 'k', 'l', '\a', '\v', '\x2', 
		'\x2', 'l', 'm', '\x5', '\x42', '\"', '\x2', 'm', '}', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\x5', 'L', '\'', '\x2', 'o', 'p', '\a', '\v', '\x2', 
		'\x2', 'p', 'q', '\x5', '\x42', '\"', '\x2', 'q', '}', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x5', '\n', '\x6', '\x2', 's', 't', '\a', '\v', '\x2', 
		'\x2', 't', 'u', '\x5', '\x42', '\"', '\x2', 'u', '}', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\a', '\x6', '\x2', '\x2', 'w', 'x', '\a', '\v', '\x2', 
		'\x2', 'x', '}', '\x5', '\x42', '\"', '\x2', 'y', 'z', '\a', '\x5', '\x2', 
		'\x2', 'z', '{', '\a', '\v', '\x2', '\x2', '{', '}', '\x5', '\x42', '\"', 
		'\x2', '|', 'j', '\x3', '\x2', '\x2', '\x2', '|', 'n', '\x3', '\x2', '\x2', 
		'\x2', '|', 'r', '\x3', '\x2', '\x2', '\x2', '|', 'v', '\x3', '\x2', '\x2', 
		'\x2', '|', 'y', '\x3', '\x2', '\x2', '\x2', '}', '\t', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x81', '\x5', '\f', '\a', '\x2', '\x7F', '\x81', '\x5', 
		'L', '\'', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x86', '\a', '\b', '\x2', '\x2', '\x83', '\x86', '\a', '\a', 
		'\x2', '\x2', '\x84', '\x86', '\a', '\t', '\x2', '\x2', '\x85', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x88', '\a', '\x4', '\x2', '\x2', '\x88', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\x32', '\x2', '\x2', 
		'\x8A', '\x8B', '\a', '\x1C', '\x2', '\x2', '\x8B', '\x8C', '\x5', '\x14', 
		'\v', '\x2', '\x8C', '\x8D', '\a', '\x1B', '\x2', '\x2', '\x8D', '\x8E', 
		'\x5', '\x12', '\n', '\x2', '\x8E', '\x8F', '\a', '\x1D', '\x2', '\x2', 
		'\x8F', '\x11', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\x43', 
		'\x2', '\x2', '\x91', '\x13', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\x5', '\x16', '\f', '\x2', '\x93', '\x94', '\a', '\n', '\x2', '\x2', 
		'\x94', '\x95', '\x5', '\x42', '\"', '\x2', '\x95', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x99', '\x5', '\x38', '\x1D', '\x2', '\x97', '\x99', 
		'\x5', '\x36', '\x1C', '\x2', '\x98', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x15', '\x3', '\x2', '\x2', '\x2', '\x9A', '\xA3', 
		'\a', '\x6', '\x2', '\x2', '\x9B', '\xA3', '\a', '\x5', '\x2', '\x2', 
		'\x9C', '\xA3', '\x5', '\n', '\x6', '\x2', '\x9D', '\xA3', '\a', '\x38', 
		'\x2', '\x2', '\x9E', '\xA0', '\x5', '\x42', '\"', '\x2', '\x9F', '\xA1', 
		'\x5', '\x46', '$', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', 
		'\a', '\x33', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x1C', '\x2', '\x2', 
		'\xA6', '\xA7', '\x5', '\n', '\x6', '\x2', '\xA7', '\xA8', '\x5', '\x1A', 
		'\xE', '\x2', '\xA8', '\xA9', '\x5', '\x1C', '\xF', '\x2', '\xA9', '\xAA', 
		'\a', '\x1D', '\x2', '\x2', '\xAA', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xAC', '\a', '\x1B', '\x2', '\x2', '\xAC', '\xAD', '\a', ';', 
		'\x2', '\x2', '\xAD', '\xAE', '\a', '\v', '\x2', '\x2', '\xAE', '\xB4', 
		'\x5', '\n', '\x6', '\x2', '\xAF', '\xB0', '\a', '\x1B', '\x2', '\x2', 
		'\xB0', '\xB1', '\a', '<', '\x2', '\x2', '\xB1', '\xB2', '\a', '\v', '\x2', 
		'\x2', '\xB2', '\xB4', '\x5', '\xE', '\b', '\x2', '\xB3', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x1B', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '=', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'\v', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\xE', '\b', '\x2', '\xB9', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x31', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '\x1C', '\x2', '\x2', '\xBC', '\xBD', '\x5', 
		' ', '\x11', '\x2', '\xBD', '\xBE', '\a', '\x1D', '\x2', '\x2', '\xBE', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x43', '\x2', 
		'\x2', '\xC0', '!', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', 
		'\x30', '\x2', '\x2', '\xC2', '\xC3', '\a', '\x1C', '\x2', '\x2', '\xC3', 
		'\xC5', '\x5', '$', '\x13', '\x2', '\xC4', '\xC6', '\x5', '&', '\x14', 
		'\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC9', '\x5', '(', '\x15', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x1D', '\x2', '\x2', '\xCB', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x43', '\x2', 
		'\x2', '\xCD', '%', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', 
		'\x1B', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x39', '\x2', '\x2', '\xD0', 
		'\xD1', '\a', '\v', '\x2', '\x2', '\xD1', '\xD2', '\x5', '\n', '\x6', 
		'\x2', '\xD2', '\'', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', 
		'\x1B', '\x2', '\x2', '\xD4', '\xD5', '\a', ':', '\x2', '\x2', '\xD5', 
		'\xD6', '\a', '\v', '\x2', '\x2', '\xD6', '\xD7', '\x5', '\xE', '\b', 
		'\x2', '\xD7', ')', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', 
		'/', '\x2', '\x2', '\xD9', '\xDA', '\a', '\x1C', '\x2', '\x2', '\xDA', 
		'\xDB', '\x5', ',', '\x17', '\x2', '\xDB', '\xDC', '\a', '\x1B', '\x2', 
		'\x2', '\xDC', '\xDD', '\x5', '.', '\x18', '\x2', '\xDD', '\xDE', '\a', 
		'\x1D', '\x2', '\x2', '\xDE', '\xE0', '\a', '\x1E', '\x2', '\x2', '\xDF', 
		'\xE1', '\x5', '\x30', '\x19', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x1F', '\x2', 
		'\x2', '\xE5', '+', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', 
		'\x43', '\x2', '\x2', '\xE7', '-', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\a', '\x43', '\x2', '\x2', '\xE9', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xEC', '\x5', '\x10', '\t', '\x2', '\xEB', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\x5', 
		'\b', '\x5', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF6', '\x5', '\x18', '\r', '\x2', '\xF5', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', '\x34', '\x2', '\x2', '\xFC', 
		'\xFD', '\a', '\x1C', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\x42', '\"', 
		'\x2', '\xFE', '\xFF', '\a', '\x1D', '\x2', '\x2', '\xFF', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\a', '\x35', '\x2', '\x2', '\x101', 
		'\x102', '\a', '\x1C', '\x2', '\x2', '\x102', '\x103', '\x5', '\x42', 
		'\"', '\x2', '\x103', '\x104', '\a', '\x1D', '\x2', '\x2', '\x104', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\a', '\x36', '\x2', '\x2', 
		'\x106', '\x107', '\a', '\x1C', '\x2', '\x2', '\x107', '\x108', '\x5', 
		':', '\x1E', '\x2', '\x108', '\x109', '\a', '\x1B', '\x2', '\x2', '\x109', 
		'\x10A', '\x5', '<', '\x1F', '\x2', '\x10A', '\x10B', '\a', '\x1B', '\x2', 
		'\x2', '\x10B', '\x10C', '\x5', '>', ' ', '\x2', '\x10C', '\x10D', '\a', 
		'\x1D', '\x2', '\x2', '\x10D', '\x37', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10F', '\a', '\x37', '\x2', '\x2', '\x10F', '\x110', '\a', '\x1C', '\x2', 
		'\x2', '\x110', '\x111', '\x5', ':', '\x1E', '\x2', '\x111', '\x112', 
		'\a', '\x1B', '\x2', '\x2', '\x112', '\x113', '\x5', '>', ' ', '\x2', 
		'\x113', '\x114', '\a', '\x1B', '\x2', '\x2', '\x114', '\x115', '\x5', 
		'@', '!', '\x2', '\x115', '\x116', '\a', '\x1D', '\x2', '\x2', '\x116', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x5', '\x42', '\"', 
		'\x2', '\x118', ';', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x5', 
		'\x42', '\"', '\x2', '\x11A', '=', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\x5', '\x42', '\"', '\x2', '\x11C', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11E', '\x5', '\x42', '\"', '\x2', '\x11E', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\b', '\"', '\x1', '\x2', 
		'\x120', '\x122', '\x5', '\n', '\x6', '\x2', '\x121', '\x123', '\x5', 
		'\x44', '#', '\x2', '\x122', '\x121', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x123', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x126', '\x5', '\f', '\a', '\x2', '\x125', '\x127', '\x5', 
		'\x44', '#', '\x2', '\x126', '\x125', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x130', '\x5', '\xE', '\b', '\x2', '\x129', '\x130', 
		'\x5', 'H', '%', '\x2', '\x12A', '\x130', '\x5', 'J', '&', '\x2', '\x12B', 
		'\x12C', '\a', '\x1C', '\x2', '\x2', '\x12C', '\x12D', '\x5', '\x42', 
		'\"', '\x2', '\x12D', '\x12E', '\a', '\x1D', '\x2', '\x2', '\x12E', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x124', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x148', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', 
		'\f', '\t', '\x2', '\x2', '\x132', '\x133', '\a', '\x16', '\x2', '\x2', 
		'\x133', '\x147', '\x5', '\x42', '\"', '\n', '\x134', '\x135', '\f', '\b', 
		'\x2', '\x2', '\x135', '\x136', '\a', '\x17', '\x2', '\x2', '\x136', '\x147', 
		'\x5', '\x42', '\"', '\t', '\x137', '\x138', '\f', '\a', '\x2', '\x2', 
		'\x138', '\x139', '\a', '\x18', '\x2', '\x2', '\x139', '\x147', '\x5', 
		'\x42', '\"', '\b', '\x13A', '\x13B', '\f', '\x6', '\x2', '\x2', '\x13B', 
		'\x13C', '\a', '\x14', '\x2', '\x2', '\x13C', '\x147', '\x5', '\x42', 
		'\"', '\a', '\x13D', '\x13E', '\f', '\x5', '\x2', '\x2', '\x13E', '\x13F', 
		'\a', '\x15', '\x2', '\x2', '\x13F', '\x147', '\x5', '\x42', '\"', '\x6', 
		'\x140', '\x141', '\f', '\x4', '\x2', '\x2', '\x141', '\x142', '\a', '\x12', 
		'\x2', '\x2', '\x142', '\x147', '\x5', '\x42', '\"', '\x5', '\x143', '\x144', 
		'\f', '\x3', '\x2', '\x2', '\x144', '\x145', '\a', '\x13', '\x2', '\x2', 
		'\x145', '\x147', '\x5', '\x42', '\"', '\x4', '\x146', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x134', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x146', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x146', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x148', '\x146', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14E', '\a', '>', '\x2', '\x2', '\x14C', '\x14E', '\a', 
		'?', '\x2', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x152', '\a', '@', '\x2', '\x2', '\x150', '\x152', '\a', 
		'\x41', '\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x152', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x156', '\x5', '\x32', '\x1A', '\x2', '\x154', '\x156', 
		'\x5', '\x34', '\x1B', '\x2', '\x155', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x157', '\x15A', '\x5', '\x38', '\x1D', '\x2', '\x158', 
		'\x15A', '\x5', '\x36', '\x1C', '\x2', '\x159', '\x157', '\x3', '\x2', 
		'\x2', '\x2', '\x159', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15A', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\a', ' ', '\x2', '\x2', 
		'\x15C', '\x15D', '\x5', 'N', '(', '\x2', '\x15D', '\x15E', '\a', '!', 
		'\x2', '\x2', '\x15E', 'M', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x164', 
		'\a', '\x42', '\x2', '\x2', '\x160', '\x161', '\a', '\x42', '\x2', '\x2', 
		'\x161', '\x162', '\a', '\x3', '\x2', '\x2', '\x162', '\x164', '\a', '\x42', 
		'\x2', '\x2', '\x163', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x163', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x164', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', 'U', '\x62', '\x64', '|', '\x80', '\x85', '\x98', '\xA0', '\xA2', 
		'\xB3', '\xC5', '\xC8', '\xE2', '\xED', '\xF2', '\xF7', '\xF9', '\x122', 
		'\x126', '\x12F', '\x146', '\x148', '\x14D', '\x151', '\x155', '\x159', 
		'\x163',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace sim6502.Grammar.Generated
